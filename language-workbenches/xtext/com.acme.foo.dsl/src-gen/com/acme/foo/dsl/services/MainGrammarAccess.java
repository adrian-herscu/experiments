/*
* generated by Xtext
*/
package com.acme.foo.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MainGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DocumentRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DocumentRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDocumentRootAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cContactsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContactsContactsParserRuleCall_1_0 = (RuleCall)cContactsAssignment_1.eContents().get(0);
		
		//// import "http://www.eclipse.org/emf/2003/XMLType" as type
		//// import "http://www.eclipse.org/emf/2002/Ecore" as ecore
		//DocumentRoot:
		//	{DocumentRoot} contacts=Contacts;
		public ParserRule getRule() { return rule; }

		//{DocumentRoot} contacts=Contacts
		public Group getGroup() { return cGroup; }

		//{DocumentRoot}
		public Action getDocumentRootAction_0() { return cDocumentRootAction_0; }

		//contacts=Contacts
		public Assignment getContactsAssignment_1() { return cContactsAssignment_1; }

		//Contacts
		public RuleCall getContactsContactsParserRuleCall_1_0() { return cContactsContactsParserRuleCall_1_0; }
	}

	public class ContactsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Contacts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContactsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContactsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContactAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContactContactParserRuleCall_3_0 = (RuleCall)cContactAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Contacts:
		//	{Contacts} "contacts" "{" contact+=Contact* "}";
		public ParserRule getRule() { return rule; }

		//{Contacts} "contacts" "{" contact+=Contact* "}"
		public Group getGroup() { return cGroup; }

		//{Contacts}
		public Action getContactsAction_0() { return cContactsAction_0; }

		//"contacts"
		public Keyword getContactsKeyword_1() { return cContactsKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//contact+=Contact*
		public Assignment getContactAssignment_3() { return cContactAssignment_3; }

		//Contact
		public RuleCall getContactContactParserRuleCall_3_0() { return cContactContactParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ContactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Contact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContactAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContactKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPhoneAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPhonePhoneParserRuleCall_3_0 = (RuleCall)cPhoneAssignment_3.eContents().get(0);
		
		//Contact:
		//	{Contact} "contact" name=Name phone=Phone;
		public ParserRule getRule() { return rule; }

		//{Contact} "contact" name=Name phone=Phone
		public Group getGroup() { return cGroup; }

		//{Contact}
		public Action getContactAction_0() { return cContactAction_0; }

		//"contact"
		public Keyword getContactKeyword_1() { return cContactKeyword_1; }

		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }

		//phone=Phone
		public Assignment getPhoneAssignment_3() { return cPhoneAssignment_3; }

		//Phone
		public RuleCall getPhonePhoneParserRuleCall_3_0() { return cPhonePhoneParserRuleCall_3_0; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEQUALSParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Name:
		//	"name" EQUALS STRING;
		public ParserRule getRule() { return rule; }

		//"name" EQUALS STRING
		public Group getGroup() { return cGroup; }

		//"name"
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }

		//EQUALS
		public RuleCall getEQUALSParserRuleCall_1() { return cEQUALSParserRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}

	public class PhoneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Phone");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPhoneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEQUALSParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Phone:
		//	"phone" EQUALS STRING;
		public ParserRule getRule() { return rule; }

		//"phone" EQUALS STRING
		public Group getGroup() { return cGroup; }

		//"phone"
		public Keyword getPhoneKeyword_0() { return cPhoneKeyword_0; }

		//EQUALS
		public RuleCall getEQUALSParserRuleCall_1() { return cEQUALSParserRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}

	public class EQUALSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EQUALS");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//EQUALS:
		//	"=";
		public ParserRule getRule() { return rule; }

		//"="
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}
	
	
	private DocumentRootElements pDocumentRoot;
	private ContactsElements pContacts;
	private ContactElements pContact;
	private NameElements pName;
	private PhoneElements pPhone;
	private EQUALSElements pEQUALS;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MainGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.acme.foo.dsl.Main".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// import "http://www.eclipse.org/emf/2003/XMLType" as type
	//// import "http://www.eclipse.org/emf/2002/Ecore" as ecore
	//DocumentRoot:
	//	{DocumentRoot} contacts=Contacts;
	public DocumentRootElements getDocumentRootAccess() {
		return (pDocumentRoot != null) ? pDocumentRoot : (pDocumentRoot = new DocumentRootElements());
	}
	
	public ParserRule getDocumentRootRule() {
		return getDocumentRootAccess().getRule();
	}

	//Contacts:
	//	{Contacts} "contacts" "{" contact+=Contact* "}";
	public ContactsElements getContactsAccess() {
		return (pContacts != null) ? pContacts : (pContacts = new ContactsElements());
	}
	
	public ParserRule getContactsRule() {
		return getContactsAccess().getRule();
	}

	//Contact:
	//	{Contact} "contact" name=Name phone=Phone;
	public ContactElements getContactAccess() {
		return (pContact != null) ? pContact : (pContact = new ContactElements());
	}
	
	public ParserRule getContactRule() {
		return getContactAccess().getRule();
	}

	//Name:
	//	"name" EQUALS STRING;
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//Phone:
	//	"phone" EQUALS STRING;
	public PhoneElements getPhoneAccess() {
		return (pPhone != null) ? pPhone : (pPhone = new PhoneElements());
	}
	
	public ParserRule getPhoneRule() {
		return getPhoneAccess().getRule();
	}

	//EQUALS:
	//	"=";
	public EQUALSElements getEQUALSAccess() {
		return (pEQUALS != null) ? pEQUALS : (pEQUALS = new EQUALSElements());
	}
	
	public ParserRule getEQUALSRule() {
		return getEQUALSAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
