/*
* generated by Xtext
*/
grammar InternalMain;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.acme.foo.dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.acme.foo.dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.acme.foo.dsl.services.MainGrammarAccess;

}

@parser::members {
 
 	private MainGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MainGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDocumentRoot
entryRuleDocumentRoot 
:
{ before(grammarAccess.getDocumentRootRule()); }
	 ruleDocumentRoot
{ after(grammarAccess.getDocumentRootRule()); } 
	 EOF 
;

// Rule DocumentRoot
ruleDocumentRoot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDocumentRootAccess().getGroup()); }
(rule__DocumentRoot__Group__0)
{ after(grammarAccess.getDocumentRootAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContacts
entryRuleContacts 
:
{ before(grammarAccess.getContactsRule()); }
	 ruleContacts
{ after(grammarAccess.getContactsRule()); } 
	 EOF 
;

// Rule Contacts
ruleContacts
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContactsAccess().getGroup()); }
(rule__Contacts__Group__0)
{ after(grammarAccess.getContactsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContact
entryRuleContact 
:
{ before(grammarAccess.getContactRule()); }
	 ruleContact
{ after(grammarAccess.getContactRule()); } 
	 EOF 
;

// Rule Contact
ruleContact
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContactAccess().getGroup()); }
(rule__Contact__Group__0)
{ after(grammarAccess.getContactAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleName
entryRuleName 
:
{ before(grammarAccess.getNameRule()); }
	 ruleName
{ after(grammarAccess.getNameRule()); } 
	 EOF 
;

// Rule Name
ruleName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNameAccess().getGroup()); }
(rule__Name__Group__0)
{ after(grammarAccess.getNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePhone
entryRulePhone 
:
{ before(grammarAccess.getPhoneRule()); }
	 rulePhone
{ after(grammarAccess.getPhoneRule()); } 
	 EOF 
;

// Rule Phone
rulePhone
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPhoneAccess().getGroup()); }
(rule__Phone__Group__0)
{ after(grammarAccess.getPhoneAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEQUALS
entryRuleEQUALS 
:
{ before(grammarAccess.getEQUALSRule()); }
	 ruleEQUALS
{ after(grammarAccess.getEQUALSRule()); } 
	 EOF 
;

// Rule EQUALS
ruleEQUALS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEQUALSAccess().getEqualsSignKeyword()); }

	'=' 

{ after(grammarAccess.getEQUALSAccess().getEqualsSignKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DocumentRoot__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DocumentRoot__Group__0__Impl
	rule__DocumentRoot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentRoot__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentRootAccess().getDocumentRootAction_0()); }
(

)
{ after(grammarAccess.getDocumentRootAccess().getDocumentRootAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DocumentRoot__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DocumentRoot__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentRoot__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentRootAccess().getContactsAssignment_1()); }
(rule__DocumentRoot__ContactsAssignment_1)
{ after(grammarAccess.getDocumentRootAccess().getContactsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Contacts__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Contacts__Group__0__Impl
	rule__Contacts__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Contacts__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContactsAccess().getContactsAction_0()); }
(

)
{ after(grammarAccess.getContactsAccess().getContactsAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Contacts__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Contacts__Group__1__Impl
	rule__Contacts__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Contacts__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContactsAccess().getContactsKeyword_1()); }

	'contacts' 

{ after(grammarAccess.getContactsAccess().getContactsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Contacts__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Contacts__Group__2__Impl
	rule__Contacts__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Contacts__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContactsAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getContactsAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Contacts__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Contacts__Group__3__Impl
	rule__Contacts__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Contacts__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContactsAccess().getContactAssignment_3()); }
(rule__Contacts__ContactAssignment_3)*
{ after(grammarAccess.getContactsAccess().getContactAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Contacts__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Contacts__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Contacts__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContactsAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getContactsAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Contact__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Contact__Group__0__Impl
	rule__Contact__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Contact__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContactAccess().getContactAction_0()); }
(

)
{ after(grammarAccess.getContactAccess().getContactAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Contact__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Contact__Group__1__Impl
	rule__Contact__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Contact__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContactAccess().getContactKeyword_1()); }

	'contact' 

{ after(grammarAccess.getContactAccess().getContactKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Contact__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Contact__Group__2__Impl
	rule__Contact__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Contact__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContactAccess().getNameAssignment_2()); }
(rule__Contact__NameAssignment_2)
{ after(grammarAccess.getContactAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Contact__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Contact__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Contact__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContactAccess().getPhoneAssignment_3()); }
(rule__Contact__PhoneAssignment_3)
{ after(grammarAccess.getContactAccess().getPhoneAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Name__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Name__Group__0__Impl
	rule__Name__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getNameKeyword_0()); }

	'name' 

{ after(grammarAccess.getNameAccess().getNameKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Name__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Name__Group__1__Impl
	rule__Name__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getEQUALSParserRuleCall_1()); }
	ruleEQUALS
{ after(grammarAccess.getNameAccess().getEQUALSParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Name__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Name__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
{ after(grammarAccess.getNameAccess().getSTRINGTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Phone__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Phone__Group__0__Impl
	rule__Phone__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Phone__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhoneAccess().getPhoneKeyword_0()); }

	'phone' 

{ after(grammarAccess.getPhoneAccess().getPhoneKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Phone__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Phone__Group__1__Impl
	rule__Phone__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Phone__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhoneAccess().getEQUALSParserRuleCall_1()); }
	ruleEQUALS
{ after(grammarAccess.getPhoneAccess().getEQUALSParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Phone__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Phone__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Phone__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhoneAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
{ after(grammarAccess.getPhoneAccess().getSTRINGTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__DocumentRoot__ContactsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentRootAccess().getContactsContactsParserRuleCall_1_0()); }
	ruleContacts{ after(grammarAccess.getDocumentRootAccess().getContactsContactsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Contacts__ContactAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContactsAccess().getContactContactParserRuleCall_3_0()); }
	ruleContact{ after(grammarAccess.getContactsAccess().getContactContactParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Contact__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContactAccess().getNameNameParserRuleCall_2_0()); }
	ruleName{ after(grammarAccess.getContactAccess().getNameNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Contact__PhoneAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContactAccess().getPhonePhoneParserRuleCall_3_0()); }
	rulePhone{ after(grammarAccess.getContactAccess().getPhonePhoneParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


